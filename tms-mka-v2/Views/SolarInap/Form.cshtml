@using tms_mka_v2.Models;

@model tms_mka_v2.Models.SolarInap
@{
    ViewBag.Title = "Form";
    Layout = "~/Views/Shared/_Layout.cshtml";
    string currentController = (string)ViewContext.RouteData.Values["controller"];
    string currentAction = (string)ViewContext.RouteData.Values["action"];
    string backLink = Url.Action("Index");
    if (currentAction == "Add")
    {
        ViewBag.Title = "Tambah SolarInap";
    }
    else
    {
        ViewBag.Title = ViewBag.name + " | Edit";
    }
}
@if (User.HasMenuAccess("DM") || User.HasMenuAccess("Marketing") || User.HasMenuAccess("Admin") || User.HasMenuAccess("Kasir"))
{
<div class="portlet light">
    <div class="portlet-title">
        <div class="caption">
            <span class="caption-subject font-dark sbold uppercase">@ViewBag.Title</span>
        </div>
    </div>
    <div class="portlet-body form">
        @using (@Html.BeginForm(currentAction, currentController, FormMethod.Post, new { @class = "form-horizontal form-label-left input_mask", @id = "formsubmit" }))
        {
            @Html.ValidationSummary(true)
            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.SalesOrderKontrakListSOId)
            @Html.HiddenFor(model => model.IdSO)
            @Html.HiddenFor(model => model.StepKe)
            <div class="portlet light">
                <div class="portlet-title">
                    <div class="caption font-green-sharp">
                        <span class="caption-subject"> Basic Info</span>
                    </div>
                    <div class="tools">
                        <a href="" class="collapse"> </a>
                    </div>
                </div>
                <div class="portlet-body">
                    @if (Model.Id == 0)
                    {
                        <button type="button" class="btn btn-sm" data-toggle="modal" data-target="#modalSo">Browse Sales Order</button>
                    }

                    @Html.ValidationMessageFor(model => model.IdSO)
                    <div class="form-group">
                        <div class="col-md-12">
                            <div id="PartialSo"></div>
                        </div>
                    </div>
                </div>
                @if (Model.StepKe == 1)
                {
                    <br /><hr /><br />
                    <div class="portlet-body">
                        <div class="form-group">
                            <div class="col-md-12">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.TanggalDari, new { @class = "control-label col-md-2 col-sm-3 col-xs-12" })
                                        <div class="col-md-4 col-sm-9 col-xs-12">
                                            @Html.TextBoxFor(model => model.TanggalDari, new { @class = "form-control-datepicker input-sm" })
                                            @Html.ValidationMessageFor(model => model.TanggalDari)
                                        </div>
                                        @Html.Label("S/D", new { @class = "control-label col-md-1 col-sm-3 col-xs-12" })
                                        <div class="col-md-4 col-sm-9 col-xs-12">
                                            @Html.TextBoxFor(model => model.TanggalHingga, new { @class = "form-control-datepicker input-sm" })
                                            @Html.ValidationMessageFor(model => model.TanggalHingga)
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.TanggalTiba, new { @class = "control-label col-md-2 col-sm-3 col-xs-12" })
                                        <div class="col-md-4 col-sm-9 col-xs-12">
                                            @Html.TextBoxFor(model => model.TanggalTiba, new { @class = "form-control-datepicker input-sm"})
                                            @Html.ValidationMessageFor(model => model.TanggalTiba)
                                        </div>
                                        <div class="col-md-5 col-sm-9 col-xs-12">
                                            <div class="input-group input-group-sm">
                                                @Html.TextBoxFor(model => model.JamTiba, new { @class = "form-control input-sm timepicker timepicker-24" })
                                                <span class="input-group-btn">
                                                    <button class="btn btn-sm default" type="button">
                                                        <i class="fa fa-clock-o"></i>
                                                    </button>
                                                </span>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.JamTiba)
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.NilaiYgDiajukan, new { @class = "control-label col-md-2 col-sm-3 col-xs-12" })
                                        <div class="col-md-10 col-sm-9 col-xs-12">
                                            @Html.TextBoxFor(model => model.NilaiYgDiajukan, new { @class = "form-control-numeric-idr" })
                                            @Html.ValidationMessageFor(model => model.NilaiYgDiajukan)
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.KeteranganOperation, new { @class = "control-label col-md-2 col-sm-3 col-xs-12" })
                                        <div class="col-md-9 col-sm-9 col-xs-12">
                                            @Html.TextAreaFor(model => model.KeteranganOperation, new { @class = "form-control input-sm" })
                                            @Html.ValidationMessageFor(model => model.KeteranganOperation)
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else 
                {
                    <br /><hr /><br />
                    <div class="portlet-body">
                        <div class="form-group">
                            <div class="col-md-12">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.TanggalDari, new { @class = "control-label col-md-2 col-sm-3 col-xs-12" })
                                        <div class="col-md-4 col-sm-9 col-xs-12">
                                            @Html.TextBoxFor(model => model.TanggalDari, new { @class = "form-control-datepicker input-sm", @ReadOnly = "true" })
                                            @Html.ValidationMessageFor(model => model.TanggalDari)
                                        </div>
                                        @Html.Label("S/D", new { @class = "control-label col-md-1 col-sm-3 col-xs-12" })
                                        <div class="col-md-4 col-sm-9 col-xs-12">
                                            @Html.TextBoxFor(model => model.TanggalDari, new { @class = "form-control-datepicker input-sm", @ReadOnly = "true" })
                                            @Html.ValidationMessageFor(model => model.TanggalDari)
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.TanggalTiba, new { @class = "control-label col-md-2 col-sm-3 col-xs-12" })
                                        <div class="col-md-4 col-sm-9 col-xs-12">
                                            @Html.TextBoxFor(model => model.TanggalTiba, new { @class = "form-control-datepicker input-sm", @ReadOnly = "true"})
                                            @Html.ValidationMessageFor(model => model.TanggalTiba)
                                        </div>
                                        <div class="col-md-5 col-sm-9 col-xs-12">
                                            <div class="input-group input-group-sm">
                                                @Html.TextBoxFor(model => model.JamTiba, new { @class = "form-control input-sm timepicker timepicker-24", @ReadOnly = "true" })
                                                <span class="input-group-btn">
                                                    <button class="btn btn-sm default" type="button">
                                                        <i class="fa fa-clock-o"></i>
                                                    </button>
                                                </span>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.JamTiba)
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.NilaiYgDiajukan, new { @class = "control-label col-md-2 col-sm-3 col-xs-12" })
                                        <div class="col-md-10 col-sm-9 col-xs-12">
                                            @Html.TextBoxFor(model => model.NilaiYgDiajukan, new { @class = "form-control-numeric-idr input-sm", @ReadOnly = "true" })
                                            @Html.ValidationMessageFor(model => model.NilaiYgDiajukan)
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.KeteranganOperation, new { @class = "control-label col-md-2 col-sm-3 col-xs-12" })
                                        <div class="col-md-9 col-sm-9 col-xs-12">
                                            @Html.TextAreaFor(model => model.KeteranganOperation, new { @class = "form-control input-sm", @ReadOnly = "true" })
                                            @Html.ValidationMessageFor(model => model.KeteranganOperation)
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                @if (Model.StepKe == 2)
                {
                    <br /><hr /><br />
                    <div class="portlet-body">
                        <div class="form-group">
                            <div class="col-md-12">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.StatusTagihan, new { @class = "control-label col-md-2 col-sm-3 col-xs-12" })
                                        <div class="col-md-10 col-sm-9 col-xs-12">
                                            @Html.DropDownListFor(model => model.StatusTagihan, new SelectList(
                                              new List<Object>{
                                                new { value = "Ditagih"},
                                                new { value = "Tidak Bisa Ditagih"},
                                                new { value = "Belum di Proses"}
                                              }, "value", "value", Model.StatusTagihan), new { @class = "form-control input-sm", @onchange = "setNominal(this)" })
                                            @Html.ValidationMessageFor(model => model.StatusTagihan)
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Nominal, new { @class = "control-label col-md-2 col-sm-3 col-xs-12" })
                                        <div class="col-md-10 col-sm-9 col-xs-12">
                                            @Html.TextBoxFor(model => model.Nominal, new { @class = "form-control-numeric-idr input-sm" })
                                            @Html.ValidationMessageFor(model => model.Nominal)
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.KeteranganMarketing, new { @class = "control-label col-md-2 col-sm-3 col-xs-12" })
                                        <div class="col-md-9 col-sm-9 col-xs-12">
                                            @Html.TextAreaFor(model => model.KeteranganMarketing, new { @class = "form-control input-sm" })
                                            @Html.ValidationMessageFor(model => model.KeteranganMarketing)
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else if (Model.StepKe == 3 || Model.StepKe == 4)
                {
                    <br /><hr /><br />
                    <div class="portlet-body">
                        <div class="form-group">
                            <div class="col-md-12">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.StatusTagihan, new { @class = "control-label col-md-2 col-sm-3 col-xs-12" })
                                        <div class="col-md-10 col-sm-9 col-xs-12">
                                            @Html.TextBoxFor(model => model.StatusTagihan, new { @class = "form-control input-sm", @Readonly = "true" })
                                            @Html.ValidationMessageFor(model => model.StatusTagihan)
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Nominal, new { @class = "control-label col-md-2 col-sm-3 col-xs-12" })
                                        <div class="col-md-10 col-sm-9 col-xs-12">
                                            @Html.TextBoxFor(model => model.Nominal, new { @class = "form-control-numeric-idr input-sm", @Readonly = "true" })
                                            @Html.ValidationMessageFor(model => model.Nominal)
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.KeteranganMarketing, new { @class = "control-label col-md-2 col-sm-3 col-xs-12" })
                                        <div class="col-md-9 col-sm-9 col-xs-12">
                                            @Html.TextAreaFor(model => model.KeteranganMarketing, new { @class = "form-control input-sm", @Readonly = "true" })
                                            @Html.ValidationMessageFor(model => model.KeteranganMarketing)
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                @if (Model.StepKe == 3)
                {
                    <br /><hr /><br />
                    <div class="portlet-body">
                        <div class="form-group">
                            <div class="col-md-12">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.Label("JumlahLabel", "Jumlah", new { @class = "control-label col-md-2 col-sm-3 col-xs-12" })
                                        <div class="col-md-10 col-sm-9 col-xs-12">
                                            @Html.TextBox("Jumlah", Model.NilaiYgDiajukan, new { @class = "form-control-numeric-idr input-sm" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.Label("Tunai", "Tunai", new { @class = "control-label col-md-2 col-sm-3 col-xs-12" })
                                        <div class="col-md-4 col-sm-9 col-xs-12">
                                            @Html.TextBoxFor(model => model.Cash, new { @class = "form-control-numeric-idr input-sm" })
                                            @Html.ValidationMessageFor(model => model.Cash)
                                        </div>
                                        @Html.LabelFor(model => model.TglCash, new { @class = "control-label col-md-2 col-sm-3 col-xs-12" })
                                        <div class="col-md-4 col-sm-9 col-xs-12">
                                            @Html.TextBoxFor(model => model.TglCash, new { @class = "form-control-datepicker input-sm" })
                                            @Html.ValidationMessageFor(model => model.TglCash)
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.IdDriver, new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })
                                        <div class="col-md-9 col-sm-9 col-xs-12">
                                            <div class="input-group input-group-sm">
                                                @Html.HiddenFor(model => model.IdDriver)
                                                @Html.TextBox("NamaDriver", "", new { @class = "form-control input-sm", @ReadOnly = "true" })
                                                <span class="input-group-btn">
                                                    <button type="button" class="btn btn-success" data-toggle="modal" data-target="#modalGridDriver">Browse</button>
                                                </span>
                                                @Html.ValidationMessageFor(model => model.IdDriver)
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.DititipKe, new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })
                                        <div class="col-md-9 col-sm-9 col-xs-12">
                                            @Html.TextBoxFor(model => model.DititipKe, new { @class = "form-control input-sm" })
                                            @Html.ValidationMessageFor(model => model.DititipKe)
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Transfer, new { @class = "control-label col-md-2 col-sm-3 col-xs-12" })
                                        <div class="col-md-4 col-sm-9 col-xs-12">
                                            @Html.TextBoxFor(model => model.Transfer, new { @class = "form-control-numeric-idr input-sm" })
                                            @Html.ValidationMessageFor(model => model.Transfer)
                                        </div>
                                        @Html.LabelFor(model => model.TglTransfer, new { @class = "control-label col-md-2 col-sm-3 col-xs-12" })
                                        <div class="col-md-4 col-sm-9 col-xs-12">
                                            @Html.TextBoxFor(model => model.TglTransfer, new { @class = "form-control-datepicker input-sm" })
                                            @Html.ValidationMessageFor(model => model.TglTransfer)
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.IdAtm, new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })
                                        <div class="col-md-9 col-sm-9 col-xs-12">
                                            <div class="input-group input-group-sm">
                                                @Html.HiddenFor(model => model.IdAtm)
                                                @Html.TextBox("AtmName", "", new { @class = "form-control input-sm", @ReadOnly = "true" })
                                                <span class="input-group-btn">
                                                    <button type="button" class="btn btn-success" data-toggle="modal" data-target="#modalGridAtm">Browse</button>
                                                </span>
                                                @Html.ValidationMessageFor(model => model.IdAtm)
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.Label("AtasNamaLabel", "Atas Nama", new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })
                                        <div class="col-md-9 col-sm-9 col-xs-12">
                                            @Html.TextBox("AtasNama", "", new { @class = "form-control input-sm", @ReadOnly = "true" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.Label("Bank", "Bank", new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })
                                        <div class="col-md-9 col-sm-9 col-xs-12">
                                            @Html.TextBox("BankName", "", new { @class = "form-control input-sm", @ReadOnly = "true" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.KeteranganAdmin, new { @class = "control-label col-md-2 col-sm-3 col-xs-12" })
                                        <div class="col-md-9 col-sm-9 col-xs-12">
                                            @Html.TextAreaFor(model => model.KeteranganAdmin, new { @class = "form-control input-sm" })
                                            @Html.ValidationMessageFor(model => model.KeteranganAdmin)
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else if (Model.StepKe == 4)
                {
                    <br /><hr /><br />
                    <div class="portlet-body">
                        <div class="form-group">
                            <div class="col-md-12">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.Label("JumlahLabel", "Jumlah", new { @class = "control-label col-md-2 col-sm-3 col-xs-12" })
                                        <div class="col-md-10 col-sm-9 col-xs-12">
                                            @Html.TextBox("Jumlah", Model.NilaiYgDiajukan, new { @class = "form-control-numeric-idr input-sm", @ReadOnly = "true" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Cash, new { @class = "control-label col-md-2 col-sm-3 col-xs-12" })
                                        <div class="col-md-4 col-sm-9 col-xs-12">
                                            @Html.TextBoxFor(model => model.Cash, new { @class = "form-control-numeric-idr input-sm", @ReadOnly = "true" })
                                            @Html.ValidationMessageFor(model => model.Cash)
                                        </div>
                                        @Html.LabelFor(model => model.TglCash, new { @class = "control-label col-md-2 col-sm-3 col-xs-12" })
                                        <div class="col-md-4 col-sm-9 col-xs-12">
                                            @Html.TextBoxFor(model => model.TglCash, new { @class = "form-control input-sm", @ReadOnly = "true" })
                                            @Html.ValidationMessageFor(model => model.TglCash)
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.IdDriver, new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })
                                        <div class="col-md-9 col-sm-9 col-xs-12">
                                            <div>
                                                @Html.HiddenFor(model => model.IdDriver)
                                                @Html.TextBox("NamaDriver", Model.NamaDriver, new { @class = "form-control input-sm", @ReadOnly = "true" })
                                                @Html.ValidationMessageFor(model => model.IdDriver)
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.DititipKe, new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })
                                        <div class="col-md-9 col-sm-9 col-xs-12">
                                            @Html.TextBoxFor(model => model.DititipKe, new { @class = "form-control input-sm", @ReadOnly = "true" })
                                            @Html.ValidationMessageFor(model => model.DititipKe)
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Transfer, new { @class = "control-label col-md-2 col-sm-3 col-xs-12" })
                                        <div class="col-md-4 col-sm-9 col-xs-12">
                                            @Html.TextBoxFor(model => model.Transfer, new { @class = "form-control-numeric-idr input-sm", @ReadOnly = "true" })
                                            @Html.ValidationMessageFor(model => model.Transfer)
                                        </div>
                                        @Html.LabelFor(model => model.TglTransfer, new { @class = "control-label col-md-2 col-sm-3 col-xs-12" })
                                        <div class="col-md-4 col-sm-9 col-xs-12">
                                            @Html.TextBoxFor(model => model.TglTransfer, new { @class = "form-control input-sm", @ReadOnly = "true" })
                                            @Html.ValidationMessageFor(model => model.TglTransfer)
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.IdAtm, new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })
                                        <div class="col-md-9 col-sm-9 col-xs-12">
                                            <div>
                                                @Html.HiddenFor(model => model.IdAtm)
                                                @Html.TextBox("AtmName", Model.NoRek, new { @class = "form-control input-sm", @ReadOnly = "true" })
                                                @Html.ValidationMessageFor(model => model.IdAtm)
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.Label("AtasNamaLabel", "Atas Nama", new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })
                                        <div class="col-md-9 col-sm-9 col-xs-12">
                                            @Html.TextBox("AtasNama", Model.AtasNama, new { @class = "form-control input-sm", @ReadOnly = "true" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.Label("Bank", "Bank", new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })
                                        <div class="col-md-9 col-sm-9 col-xs-12">
                                            @Html.TextBox("BankName", Model.BankNama, new { @class = "form-control input-sm", @ReadOnly = "true" })
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.KeteranganAdmin, new { @class = "control-label col-md-2 col-sm-3 col-xs-12" })
                                        <div class="col-md-9 col-sm-9 col-xs-12">
                                            @Html.TextAreaFor(model => model.KeteranganAdmin, new { @class = "form-control input-sm", @ReadOnly = "true" })
                                            @Html.ValidationMessageFor(model => model.KeteranganAdmin)
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                
            </div>
            
            <div class="ln_solid"></div>
            <div class="form-group">
                <div class="col-md-9 col-sm-9 col-xs-12 col-md-offset-2">
                    <button type="submit" class="btn btn-success">Submit</button>
                    <a href="@backLink" class="btn btn-link">Cancel</a>
                </div>
            </div>
        }
    </div>
</div>

<div id="modalSo" class="modal fade bs-modal-full" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-full">
        <div id="modalForm" class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true"></button>
                <h4 class="modal-title">List Sales Order</h4>
            </div>
            <div class="modal-body">
                <div id="GridSo"></div>
            </div>
        </div>
    </div>
</div>
<div id="modalGridDriver" class="modal fade bs-modal-lg" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div id="modalForm" class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true"></button>
                <h4 class="modal-title">List Driver</h4>
            </div>
            <div class="modal-body">
                <div id="GridDriver"></div>
            </div>
        </div>
    </div>
</div>
<div id="modalGridAtm" class="modal fade bs-modal-lg" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div id="modalForm" class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true"></button>
                <h4 class="modal-title">List No Rekening</h4>
            </div>
            <div class="modal-body">
                <div id="GridAtm"></div>
            </div>
        </div>
    </div>
</div>

@section scripts{
<script type="text/javascript">
    var dsSo = [] , dsGridTambahan = [];
    var gridIndex, GridTambahan;
    var tydriver = "";
    var IdSo = 0;

    function SelectDriver(e) {
        e.preventDefault();
        var data = this.dataItem(getDataRowGrid(e));
        $('#IdDriver').val(data.Id);
        $('#NamaDriver').val(data.NamaDriver);
        $('#modalGridDriver').modal('hide');
    }
    function SelectAtm(e) {
        e.preventDefault();
        var data = this.dataItem(getDataRowGrid(e));
        $('#IdAtm').val(data.Id);
        $('#AtmName').val(data.NoRekening);
        $('#AtasNama').val(data.AtasNama);
        $('#BankName').val(data.NamaBank);
        $('#modalGridAtm').modal('hide');
    }

    function setNominal(obj){
        if(obj.value=='Tidak Bisa Ditagih'){
            $('#Nominal').val(0)
            $('#Nominal').attr('disabled', true)
            $('#Nominal').kendoNumericTextBox({
                value: 0,
                max: 1000000000000000000,
                decimals: 2,
                disabled: true,
                format: "Rp ###,###.00 ",
                spinners: false
            });
        }
        else{
            $('#Nominal').removeAttr('disabled')
            $('#Nominal').kendoNumericTextBox({
                max: 1000000000000000000,
                decimals: 2,
                format: "Rp ###,###.00 ",
                spinners: false
            });
        }
    }

    function selectSo(e) {
        e.preventDefault();
        var data = this.dataItem(getDataRowGrid(e));

        $.ajax({
            url: 'GetPartialSo?idSo='+data.IdSalesOrder+'&ListIdSo='+data.ListIdSo,
            contentType:'application/html; charset=utf-8',
            type:'GET',
            dataType:'html'
        }).success( function (res){
            $("#IdSO").val(data.IdSalesOrder);
            $("#SalesOrderKontrakListSOId").val(data.ListIdSo);
            $("#listIdSoKontrak").val(data.ListIdSo);
            $('#PartialSo').html(res);
        })


        $.ajax({
            url: 'GetDetailSo?idSo='+data.IdSalesOrder+'&ListIdSo='+data.ListIdSo,
            type: "POST",
            success: function (res) {

                var data = jQuery.parseJSON(res);
                console.log(data)
                var TotalSpbu = 0;
                var TotalKapal = 0;
                var TotalTf = 0;
                var TotalUang = 0;


                for( var i = 0 ; i < data.ModelListSpbu.length ; i++)
                {
                    TotalSpbu = TotalSpbu + data.ModelListSpbu[i].Value;
                }
                for( var i = 0 ; i < data.ModelListKapal.length ; i++)
                {
                    TotalKapal = TotalKapal + data.ModelListKapal[i].Value;
                }
                for( var i = 0 ; i < data.ModelListTf.length ; i++)
                {
                    if(data.ModelListTf[i].Nama != "Tunai")
                        TotalTf = TotalTf + data.ModelListTf[i].Value;
                    else
                        TotalUang = TotalUang + data.ModelListTf[i].Value;
                }
                $("#KasDiterima").data("kendoNumericTextBox").value(TotalUang);
                $("#TransferDiterima").data("kendoNumericTextBox").value(TotalTf);
                $("#SolarDiterima").data("kendoNumericTextBox").value(TotalSpbu);
                $("#KapalDiterima").data("kendoNumericTextBox").value(TotalKapal);
                $("#IdDriverTujuan").val(data.IdDriver1);
                $("#NamaDriverTujuan").val(data.NamaDriver1);

                if(data.DummyAtm != null)
                {
                    $("#IdAtm").val(data.DummyAtm.Id);
                    $("#NoRekening").val(data.DummyAtm.NoRekening);
                    $("#AtasNamaRek").val(data.DummyAtm.AtasNama);
                    $("#Bank").val(data.DummyAtm.NamaBank);
                }
                else
                {
                    $("#IdAtm").val('');
                    $("#NoRekening").val('');
                    $("#AtasNamaRek").val('');
                    $("#Bank").val('');
                }
            },
            error:function(){

            }
        });

        $('#modalSo').modal('hide');
    }

    $(document).ready(function () {
        if(@Model.Id != 0)
        {
            $.ajax({
                url: 'GetPartialSo?idSo=' + '@Model.IdSO',
                    contentType:'application/html; charset=utf-8',
                    type:'GET',
                    dataType:'html'
            }).success( function (res){
                $('#PartialSo').html(res);
            })
        }
        else if(@ViewBag.IdSO > 0)
        {
            $.ajax({
                url: 'GetPartialSo?idSo=' + '@ViewBag.IdSO',
                    contentType:'application/html; charset=utf-8',
                    type:'GET',
                    dataType:'html'
            }).success( function (res){
                $('#PartialSo').html(res);
            })
        }
            //Driver
            var dsDriver = new kendo.data.DataSource({
                transport: {
                    read: {
                        url: '@Url.Action("Binding", "Driver")',
                        dataType: "json"
                    },
                },
                schema: {
                    total: "total",
                    data: "data",
                    model: {
                        fields: {
                            "Id": { type: "number" },
                            "KodeDriver": { type: "string" },
                            "NamaDriver": { type: "string" },
                            "NamaPangilan": { type: "string" },
                        }
                    }
                },
                pageSize: 10,
                pageable: true,
                serverFiltering: true,
                serverPaging: true,
                serverSorting: true,
                sortable: true,
                //sort: { field: "SubmittedDate", dir: "desc" }
            })

            gridDriver = $("#GridDriver").kendoGrid({
                dataSource: dsDriver,
                filterable: kendoGridFilterable,
                sortable: true,
                reorderable: true,
                resizable: true,
                pageable: true,
                columns: [
                    {
                        command: [
                         {
                             name: "select",
                             text: "Select",
                             click: SelectDriver,
                             imageClass: "glyphicon glyphicon-ok",
                             template: '<a class="k-button-icon #=className#" #=attr# href="\\#"><span class="#=iconClass# #=imageClass#"></span></a>'
                         }
                        ],
                        width: "50px"
                    },
                    {
                        field: "KodeDriver",
                        title: "Kode Driver"
                    },
                    {
                        field: "NamaDriver",
                        title: "Nama Driver"
                    },
                    {
                        field: "NamaPangilan",
                        title: "Nama Pangilan"
                    },

                ],
            }).data("kendoGrid");

            //Atm
            var dsAtm = new kendo.data.DataSource({
                transport: {
                    read: {
                        url: '@Url.Action("Binding", "Atm")',
                        dataType: "json"
                    },
                },
                schema: {
                    total: "total",
                    data: "data",
                    model: {
                        fields: {
                            "Id": { type: "number" },
                            "NoRekening": { type: "string" },
                            "AtasNama": { type: "string" },
                            "NamaBank": { type: "string" },
                        }
                    }
                },
                pageSize: 10,
                pageable: true,
                serverFiltering: true,
                serverPaging: true,
                serverSorting: true,
                sortable: true,
                //sort: { field: "SubmittedDate", dir: "desc" }
            })

            gridAtm = $("#GridAtm").kendoGrid({
                dataSource: dsAtm,
                filterable: kendoGridFilterable,
                sortable: true,
                reorderable: true,
                resizable: true,
                pageable: true,
                columns: [
                    {
                        command: [
                         {
                             name: "select",
                             text: "Select",
                             click: SelectAtm,
                             imageClass: "glyphicon glyphicon-ok",
                             template: '<a class="k-button-icon #=className#" #=attr# href="\\#"><span class="#=iconClass# #=imageClass#"></span></a>'
                         }
                        ],
                        width: "50px"
                    },
                    {
                        field: "NoRekening",
                        title: "No Rekening"
                    },
                    {
                        field: "AtasNama",
                        title: "Atas Nama"
                    },
                    {
                        field: "NamaBank",
                        title: "Nama Bank"
                    },

                ],
            }).data("kendoGrid");
            dsSo = new kendo.data.DataSource({
                transport: {
                    read: {
                        url: '@Url.Action("BindingSo")',
                    dataType: "json"
                },
            },
            schema: {
                total: "total",
                data: "data",
                model: {
                    fields: {
                        "Id": { type: "number" },
                        "IdSalesOrder": { type: "number" },
                        "Status": { type: "string" },
                        "JenisOrder": { type: "string" },
                        "NoSo": { type: "string" },
                        "Customer": { type: "string" },
                        "VehicleNo": { type: "string" },
                        "JenisTruk": { type: "string" },
                        "IDDriver": { type: "string" },
                        "Driver": { type: "string" },
                        "Rute": { type: "string" },
                        "JumlahRit": { type: "number" },
                        "KeteranganPenggatian": { type: "string" },
                        "ListIdSo":{ type: "string" },
                    }
                }
            },
            pageSize: 10,
            pageable: true,
            sortable: true,
        });
        gridIndex = $("#GridSo").kendoGrid({
            dataSource: dsSo,
            filterable: kendoGridFilterable,
            sortable: true,
            reorderable: true,
            resizable: true,
            pageable: true,
            groupable: true,
            columns: [
                {
                    command: [
                        {
                            name: "select",
                            text: "Select",
                            click: selectSo,
                            imageClass: "glyphicon glyphicon-ok",
                            template: '<a class="k-button-icon #=className#" #=attr# href="\\#"><span class="#=iconClass# #=imageClass#"></span></a>'
                        }
                    ],
                    width: "50px"
                },
                {
                    field: "NoSo",
                    title: "SO Number"
                },
                {
                    field: "Customer",
                    title: "Customer"
                },
                {
                    field: "VehicleNo",
                    title: "Vehicle No"
                },
                {
                    field: "JenisTruk",
                    title: "Vehicle No"
                },
                {
                    field: "IDDriver",
                    title: "ID Driver"
                },
                {
                    field: "Driver",
                    title: "Driver"
                },
                {
                    field: "Rute",
                    title: "Rute"
                },
                {
                    field: "TanggalMuat",
                    title: "Tanggal Muat",
                    template: "#= TanggalMuat != null ? kendo.toString(kendo.parseDate(TanggalMuat, 'yyyy-MM-dd'), 'dd/MM/yyyy') : ''#"
                },
                {
                    field: "JamMuat",
                    title: "Jam Muat",
                    template: "#= JamMuat != null ? kendo.toString(new Date(1, 1, 1, JamMuat.Hours, JamMuat.Minutes), 'HH : mm') : ''#",
                },
                {
                    field: "JumlahRit",
                    title: "Jumlah Rit"
                },
                {
                    field: "KeteranganPenggatian",
                    title: "Keterangan Penggatian"
                },
            ],
        }).data("kendoGrid");
    })
</script>
<script type="text/javascript" src="~/Content/Driver/InitialGridSo.js"></script>
}
}
else{
    ViewBag.Title = "AccessDenied";
    Layout = "~/Views/Shared/_Layout.cshtml";
    <h1>Maaf, anda tidak memiliki hak akses yang cukup untuk mengakses halaman ini</h1>
}