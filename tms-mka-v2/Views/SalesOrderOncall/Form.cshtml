@using tms_mka_v2.Models;
@model tms_mka_v2.Models.SalesOrderOncall
@{
    ViewBag.Title = "Form";
    Layout = "~/Views/Shared/_Layout.cshtml";
    string currentController = (string)ViewContext.RouteData.Values["controller"];
    string currentAction = (string)ViewContext.RouteData.Values["action"];
    string backLink = Url.Action("Index");
    if (currentAction == "Add")
    {
        ViewBag.Title = "Tambah Sales Order Oncall";
    }
    else
    {
        ViewBag.Title = ViewBag.name + " | Edit";
    }
}
<div class="portlet light">
    <div class="portlet-title">
        <div class="caption">
            <span class="caption-subject font-dark sbold uppercase">@ViewBag.Title</span>
        </div>
    </div>
    <div class="portlet-body form">
        @using (@Html.BeginForm(currentAction, currentController, FormMethod.Post, new { @class = "form-horizontal", @id = "formsubmit" }))
        {
            @Html.ValidationSummary(true)
            @Html.HiddenFor(model => model.SalesOrderId)
            @Html.HiddenFor(model => model.SalesOrderOnCallId)
            @Html.HiddenFor(model => model.Status)
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.SONumber, new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })
                        <div class="col-md-9 col-sm-9 col-xs-12">
                            @Html.TextBoxFor(model => model.SONumber, new { @class = "form-control input-sm", @readonly = "true" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.TanggalOrder, new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })
                        <div class="col-md-5 col-sm-9 col-xs-12">
                            @Html.TextBoxFor(model => model.TanggalOrder, new { @class = "form-control-datepicker" })
                            @Html.ValidationMessageFor(model => model.TanggalOrder)
                        </div>
                        <div class="col-md-4 col-sm-9 col-xs-12">
                            <div class="input-group input-group-sm">
                                @Html.TextBoxFor(model => model.JamOrder, new { @class = "form-control input-sm timepicker timepicker-24" })
                                <span class="input-group-btn">
                                    <button class="btn btn-sm default" type="button">
                                        <i class="fa fa-clock-o"></i>
                                    </button>
                                </span>
                            </div>
                            @Html.ValidationMessageFor(model => model.JamOrder)
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.KodeCustomer, new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })
                        <div class="col-md-9 col-sm-9 col-xs-12">
                            <div class="input-group input-group-sm">
                                @Html.HiddenFor(model => model.CustomerId)
                                @Html.TextBoxFor(model => model.KodeCustomer, new { @class = "form-control", @readonly = "true" })
                                <span class="input-group-btn">
                                    <button type="button" class="btn btn-success" data-toggle="modal" data-target="#modalGridCust">Browse</button>
                                </span>
                            </div>
                            @Html.ValidationMessageFor(model => model.KodeCustomer)
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.KodeNama, new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })
                        <div class="col-md-9 col-sm-9 col-xs-12">
                            @Html.TextBoxFor(model => model.KodeNama, new { @class = "form-control input-sm", @readonly = "true" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.NamaCustomer, new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })
                        <div class="col-md-9 col-sm-9 col-xs-12">
                            @Html.TextBoxFor(model => model.NamaCustomer, new { @class = "form-control input-sm", @readonly = "true" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.PrioritasId, new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })
                        <div class="col-md-9 col-sm-9 col-xs-12">
                            @Html.TextBoxFor(model => model.PrioritasId, new { @class = "form-control input-sm" })
                            @Html.ValidationMessageFor(model => model.PrioritasId)
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.StatusKredit, new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })
                        <div class="col-md-9 col-sm-9 col-xs-12">
                            @Html.TextBoxFor(model => model.StatusKredit, new { @class = "form-control input-sm", @readonly = "true" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.JenisTruckId, new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })
                        <div class="col-md-9 col-sm-9 col-xs-12">
                            @Html.TextBoxFor(model => model.JenisTruckId, new { @class = "form-control input-sm" })
                            @Html.ValidationMessageFor(model => model.JenisTruckId)
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.ProductId, new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })
                        <div class="col-md-9 col-sm-9 col-xs-12">
                            @Html.TextBoxFor(model => model.ProductId, new { @class = "form-control input-sm" })
                            @Html.ValidationMessageFor(model => model.ProductId)
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Suhu, new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })
                        <div class="col-md-9 col-sm-9 col-xs-12">
                            @Html.TextBoxFor(model => model.Suhu, new { @class = "form-control-numeric-suhu", @readonly = "true" })
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.TanggalMuat, new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })
                        <div class="col-md-5 col-sm-9 col-xs-12">
                            @Html.TextBoxFor(model => model.TanggalMuat, new { @class = "form-control-datepicker" })
                            @Html.ValidationMessageFor(model => model.TanggalMuat)
                        </div>
                        <div class="col-md-4 col-sm-9 col-xs-12">
                            <div class="input-group input-group-sm">
                                @Html.TextBoxFor(model => model.JamMuat, new { @class = "form-control input-sm timepicker timepicker-24" })
                                <span class="input-group-btn">
                                    <button class="btn btn-sm default" type="button">
                                        <i class="fa fa-clock-o"></i>
                                    </button>
                                </span>
                            </div>
                            @Html.ValidationMessageFor(model => model.JamMuat)
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.RuteId, new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })
                        <div class="col-md-9 col-sm-9 col-xs-12">
                            <div class="input-group input-group-sm">
                                @Html.HiddenFor(model => model.RuteId)
                                @Html.TextBoxFor(model => model.Rute, new { @class = "form-control", @readonly = "true" })
                                <span class="input-group-btn">
                                    <button type="button" class="btn btn-success" data-toggle="modal" data-target="#modalGridRute" onclick="tandaanAnuDipilih()">Browse</button>
                                </span>
                            </div>
                            @Html.ValidationMessageFor(model => model.RuteId)
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.StrMultidrop, new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })
                        <div class="col-md-9 col-sm-9 col-xs-12">
                            @Html.TextAreaFor(model => model.StrMultidrop, new { @class = "form-control input-sm", @readonly = true })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.PenanganKhusus, new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })
                        <div class="col-md-9 col-sm-9 col-xs-12">
                            @Html.TextBoxFor(model => model.PenanganKhusus, new { @class = "form-control input-sm", @readonly = "true" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Keterangan, new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })
                        <div class="col-md-9 col-sm-9 col-xs-12">
                            @Html.TextAreaFor(model => model.Keterangan, new { @class = "form-control input-sm" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="panel panel-default">
                    <div class="panel-body">
                        <label> Alamat muat </label>
                        <br />
                        @Html.ValidationMessageFor(model => model.StrLoad)
                        <div id="gridmuat"></div>
                        @Html.HiddenFor(model => model.StrLoad)
                        <br />
                        <div class="form-group">
                            @Html.LabelFor(model => model.KeteranganLoading, new { @class = "control-label col-md-1 col-sm-3 col-xs-12" })
                            <div class="col-md-11 col-sm-9 col-xs-12">
                                @Html.TextAreaFor(model => model.KeteranganLoading, new { @class = "form-control input-sm" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="panel panel-default">
                    <div class="panel-body">
                        <label> Alamat bongkar </label>
                        <br />
                        @Html.ValidationMessageFor(model => model.StrUnload)
                        <div id="gridbongkar"></div>
                        @Html.HiddenFor(model => model.StrUnload)
                        <br />
                        <div class="form-group">
                            @Html.LabelFor(model => model.KeteranganUnloading, new { @class = "control-label col-md-1 col-sm-3 col-xs-12" })
                            <div class="col-md-11 col-sm-9 col-xs-12">
                                @Html.TextAreaFor(model => model.KeteranganUnloading, new { @class = "form-control input-sm" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        <div class="row">
            @Html.Partial("SalesOrderOncall/_Comment", Model)
        </div>
        <div class="row">
            <div class="form-group">
                <div class="col-md-12">
                    <button type="button" name="btnsave" value="save" class="btn btn-success" onclick="notifSave($('#formsubmit'),$(this).val());">Submit</button>
                    <button type="submit" name="btnsave" value="draft" class="btn btn-success">Save As Draft</button>
                    <a href="@backLink" class="btn btn-link">Cancel</a>
                </div>
            </div>
        </div>
        }
    </div>
</div>
<div id="modalGridCust" class="modal fade bs-modal-lg" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div id="modalForm" class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true"></button>
                <h4 class="modal-title">List Customer</h4>
            </div>
            <div class="modal-body">
                <div id="GridCust"></div>
            </div>
        </div>
    </div>
</div>
<div id="modalGridRute" class="modal fade bs-modal-lg" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div id="modalForm" class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true"></button>
                <h4 class="modal-title">List Rute</h4>
            </div>
            <div class="modal-body">
                <div id="GridRute"></div>
            </div>
        </div>
    </div>
</div>
@section scripts{
    <script type="text/javascript">
        var dsRute, dsCust;
        var gridRute, gridCust;
        var dsProduct, cboproduct;
        var dsGridLoad = [], dsGridUnLoad = [];
        var GridCustLoad, GridCustUnLoad;
        var checkedIdLoad = {}, checkedIdUnoad = {};

        @if (ViewBag.errorMsg != null)
        { 
            <text>
        swal({
            title: "Error",
            type: 'error',
            text: '@ViewBag.errorMsg',
            showCloseButton: true,
        })
        </text>        
        }


        @if (Model.ListLoad != null)
        {
            foreach (SalesOrderLoadUnload item in Model.ListLoad)
            {
                if (item.IsSelect)
                {
                    <text>
        checkedIdLoad[@item.Id] = true;
        </text>
        }
                <text>
        dsGridLoad.push({Id: @item.Id,
            Alamat: '@item.Alamat',
            Provinsi: '@item.Provinsi',
            Kota: '@item.Kota',
            Zona: '@item.Zona',
            Telp: '@item.Telp',
            Fax: '@item.Fax',
            urutan: '@item.urutan',
            IsSelect : '@item.IsSelect'});
        </text>
            }
        }

        @if (Model.ListUnload != null)
        {
            foreach (SalesOrderLoadUnload item in Model.ListUnload)
            {
                if (item.IsSelect)
                {
                    <text>
        checkedIdUnoad[@item.Id] = true;
        </text>
                }
                <text>
        dsGridUnLoad.push({Id: @item.Id,
            Alamat: '@item.Alamat',
            Provinsi: '@item.Provinsi',
            Kota: '@item.Kota',
            Zona: '@item.Zona',
            Telp: '@item.Telp',
            Fax: '@item.Fax',
            urutan: '@item.urutan',
            IsSelect : '@item.IsSelect'});
        </text>
            }
        }

        function SelectCust(e) {
            e.preventDefault();
            var data = this.dataItem(getDataRowGrid(e));

            $('#CustomerId').val(data.Id);
            $('#modalGridCust').modal('hide');
            callAjax(data.Id, false);
        }

        function SelectRute(e) {
            //e.preventDefault();
            var data = this.dataItem(getDataRowGrid(e));

            var datarute = data.ListIdRute.split(',');
            var multi = [];
            var listIdRuteLoad = [];
            var listIdRuteUnload = [];
            var promises = [];

            for (var i = 0 ; i < datarute.length ; i++)
            {
                var request = $.ajax({
                    url: '@Url.Action("GetDataForSo", "Rute")',
                    type: 'POST',
                    dataType: 'Json',
                    data: {
                        id: datarute[i],
                    },
                    cache: false,
                    success: function (res) {
                        listIdRuteLoad.push(res.data.IdAsal)
                        listIdRuteUnload.push(res.data.IdTujuan)
                        if(res.data.MultiDrop != null)
                            multi.push(res.data.MultiDrop);
                        
                        $('#StrMultidrop').val(multi);
                    },
                })
                promises.push(request)
            }

            $.when.apply(null, promises).done(function() {
                console.log($('#CustomerId').val())
                var request = $.ajax({
                    url: '@Url.Action("GetSpecLocation", "Customer")',
                    type: 'POST',
                    dataType: 'Json',
                    data: {
                        id: $('#CustomerId').val(),
                        idLoad: listIdRuteLoad,
                        idUnload: listIdRuteUnload,
                        ListMultidrop:multi,
                    },
                    cache: false,
                    success: function (res) {
                        dsGridLoad = [];
                        res.dataLoad.forEach( function (item)
                        {
                            dsGridLoad.push({
                                Id: item.Id,
                                Alamat: item.Alamat,
                                Provinsi: item.Provinsi,
                                Kota: item.Kota,
                                Zona: item.Zona,
                                Telp: item.Telp,
                                Fax: item.Fax,
                                urutan: 0
                            })
                        });
                        GridCustLoad.dataSource.data(dsGridLoad);

                        dsGridUnLoad = [];
                        res.dataUnload.forEach( function (item)
                        {
                            dsGridUnLoad.push({
                                Id: item.Id,
                                Alamat: item.Alamat,
                                Provinsi: item.Provinsi,
                                Kota: item.Kota,
                                Zona: item.Zona,
                                Telp: item.Telp,
                                Fax: item.Fax,
                                urutan: 0
                            })
                        });
                        GridCustUnLoad.dataSource.data(dsGridUnLoad);
                    },
                })
            })

            $('#RuteId').val(data.Id);
            $('#Rute').val(data.NamaRuteDaftarHarga);

            $('#modalGridRute').modal('hide');
        }

        function callAjax(id, overide) {
            $.ajax({
                url: '@Url.Action("GetDataForSO", "Customer")',
                type: 'POST',
                dataType: 'Json',
                data: {
                    id: id,
                },
                cache: false,
                success: function (res) {
                    $('#KodeCustomer').val(res.Kode);
                    $('#KodeNama').val(res.KodeNama);
                    $('#NamaCustomer').val(res.Nama);
                    $('#PenanganKhusus').val(res.PenangananKhusus);

                    dsProduct = new kendo.data.DataSource({
                        transport: {
                            read: {
                                url: '@Url.Action("BindingProduct", "Customer")?idCust=' + id,
                                dataType: "json"
                            },
                        },
                        schema: {
                            data: "data",
                            model: {
                                fields: {
                                    idProduk: { type: "number" },
                                    NamaProduct: { type: "string" },
                                }
                            }
                        },
                    });

                    cboproduct.text('');
                    cboproduct.value();
                    cboproduct.setDataSource(dsProduct);
                    $('#Suhu').data("kendoNumericTextBox").value('');
                    if (overide == true)
                    {
                        cboproduct.value(@Model.ProductId);
                        $.ajax({
                            url: '@Url.Action("getTreatmentProduct", "Customer")',
                            type: 'POST',
                            dataType: 'Json',
                            data: {
                                id: cboproduct.text(),
                                idCust: $("#CustomerId").val()
                            },
                            cache: false,
                            success: function (res) {
                                if(res.treatment !== null)
                                    $('#PenanganKhusus').val($('#PenanganKhusus').val().split(', ')[0] + ', ' + res.treatment);
                                $('#Suhu').data("kendoNumericTextBox").value(res.suhu);
                            }
                        })
                    }

                    getnerateRute(overide);

                    GridCustLoad.dataSource.data(dsGridLoad);
                    GridCustUnLoad.dataSource.data(dsGridUnLoad);
                }
            })
        }

        function onProductChange(e) {
            if (this.text() != '') {
                $.ajax({
                    url: '@Url.Action("getTreatmentProduct", "Customer")',
                    type: 'POST',
                    dataType: 'Json',
                    data: {
                        id: this.value(),
                        idCust: $("#CustomerId").val()
                    },
                    cache: false,
                    success: function (res) {
                        if(res.treatment !== null)
                            $('#PenanganKhusus').val($('#PenanganKhusus').val().split(', ')[0] + ', ' + res.treatment);
                        $('#Suhu').data("kendoNumericTextBox").value(res.suhu);
                    }
                })
            }
            else {
                $('#PenanganKhusus').val($('#PenanganKhusus').val().split(', ')[0]);
                $('#Suhu').data("kendoNumericTextBox").value('');
            }
        }

        function selectLoad() {
            var checked = this.checked,
            row = $(this).closest("tr"),
            dataItem = GridCustLoad.dataItem(row);

            GridCustLoad.closeCell();

            checkedIdLoad[dataItem.Id] = checked;
            if (checked) {
                //-select the row
                row.addClass("k-state-selected");
                dataItem.IsSelect = true;
            } else {
                //-remove selection
                row.removeClass("k-state-selected");
                dataItem.IsSelect = false;
                dataItem.set("urutan", 0);
            }
        }

        function selectUnload() {
            var checked = this.checked,
            row = $(this).closest("tr"),
            dataItem = GridCustUnLoad.dataItem(row);

            GridCustUnLoad.closeCell();

            checkedIdUnoad[dataItem.Id] = checked;
            if (checked) {
                //-select the row
                row.addClass("k-state-selected");
                dataItem.IsSelect = true;
            } else {
                //-remove selection
                row.removeClass("k-state-selected");
                dataItem.IsSelect = false;
                dataItem.set("urutan", 0);
            }
        }

        function onDataBoundLoad(e) {
            var view = this.dataSource.view();
            for (var i = 0; i < view.length; i++) {
                if (checkedIdLoad[view[i].Id]) {
                    this.tbody.find("tr[data-uid='" + view[i].uid + "']")
                    .addClass("k-state-selected")
                    .find(".checkbox")
                    .attr("checked", "checked");
                    var urut = $.map(dsGridLoad, function(itemLoad) {
                        if(itemLoad.Id == view[i].Id)
                            return itemLoad.urutan;
                    });
                    view[i].set("urutan", urut[0])
                }
            }
        }

        function onDataBoundUnload(e) {
            var view = this.dataSource.view();
            for (var i = 0; i < view.length; i++) {
                if (checkedIdUnoad[view[i].Id]) {
                    this.tbody.find("tr[data-uid='" + view[i].uid + "']")
                    .addClass("k-state-selected")
                    .find(".checkbox")
                    .attr("checked", "checked");
                    var urut = $.map(dsGridUnLoad, function(itemLoad) {
                        if(itemLoad.Id == view[i].Id)
                            return itemLoad.urutan;
                    });
                    view[i].set("urutan", urut[0])
                }
            }
        }

        function getnerateRute(overide) {
            if(overide == false)
            {
                $("#Rute").val('');
                $("#RuteId").val('');
                checkedIdLoad = {};
                checkedIdUnoad = {};
                dsGridLoad = [];
                dsGridUnLoad = [];
            }

            $.ajax({
                url: '@Url.Action("GetRuteByCustomer", "DaftarHargaOnCall")',
                type: 'POST',
                dataType: 'Json',
                data: {
                    idCust: $('#CustomerId').val(),
                    tanggalMuat:$('#TanggalMuat').val().toString(),
                },
                cache: false,
                success: function (res) {
                    dsRute = [];
                    for(var i = 0 ; i < res.data.length ; i++)
                    {
                        dsRute.push({
                            Id:res.data[i].Id,
                            NamaRuteDaftarHarga : res.data[i].NamaRuteDaftarHarga,
                            ListNamaRute : res.data[i].ListNamaRute,
                            ListIdRute : res.data[i].ListIdRute,
                            NamaJenisTruck : res.data[i].NamaJenisTruck,
                            SatuanHarga : res.data[i].SatuanHarga,
                            Keterangan : res.data[i].Keterangan,
                        });
                    }
                    gridRute.dataSource.data(dsRute);
                },
                error:function()
                {
                    dsRute = [];
                    gridRute.dataSource.data(dsRute);
                }
            })
            GridCustLoad.dataSource.data(dsGridLoad);
            GridCustUnLoad.dataSource.data(dsGridUnLoad);
        }

        function tandaanAnuDipilih()
        {
            var view = gridRute.dataSource.view();
            for (var i = 0; i < view.length; i++) {
                if (view[i].Id == $('#RuteId').val()) {
                    gridRute.tbody.find("tr[data-uid='" + view[i].uid + "']").addClass("k-state-selected")
                }
                else{
                    gridRute.tbody.find("tr[data-uid='" + view[i].uid + "']").removeClass("k-state-selected")
                }
            }
        }

        $(document).ready(function () {
            $("#TanggalMuat").data('kendoDatePicker').bind("change", function (e) {
                getnerateRute(false);
            });

            $("#PrioritasId").kendoComboBox();

            var dsPrioritas = new kendo.data.DataSource({
                transport: {
                    read: {
                        url: '@Url.Action("GetSoPrioritas")',
                        dataType: "json"
                    },
                },
            });

            InitLookUp($("#PrioritasId"), dsPrioritas);

            $("#JenisTruckId").kendoComboBox({
                dataSource: {
                    transport: {
                        read: {
                            url: '@Url.Action("GetJnsTruck","JenisTruck")',
                            dataType: "json"
                        },
                    },
                },
                dataTextField: "StrJenisTruck",
                dataValueField: "Id",
                filter: "contains",
                suggest: true,
            });

            cboproduct = $("#ProductId").kendoComboBox({
                dataTextField: "NamaProduct",
                dataValueField: "idProduk",
                filter: "contains",
                suggest: true,
                change: onProductChange
            }).data("kendoComboBox");

            dsCust = new kendo.data.DataSource({
                transport: {
                    read: {
                        url: '/Customer/Binding/',
                        dataType: "json"
                    },
                },
                schema: {
                    total: "total",
                    data: "data",
                    model: {
                        fields: {
                            "Id": { type: "number" },
                            "CustomerCode": { type: "string" },
                            "CustomerCodeOld": { type: "string" },
                            "CustomerNama": { type: "string" },
                            "WajibPO": { type: "boolean" },
                            "WajibGPS": { type: "boolean" },
                            "SpecialTreatment": { type: "string" }
                        }
                    }
                },
                pageSize: 10,
                pageable: true,
                serverFiltering: true,
                serverPaging: true,
                serverSorting: true,
                sortable: true,
            });

            gridCust = $("#GridCust").kendoGrid({
                dataSource: dsCust,
                filterable: kendoGridFilterable,
                sortable: true,
                reorderable: true,
                resizable: true,
                pageable: true,
                columns: [
                    {
                        command: [
                            {
                                name: "select",
                                text: "Select",
                                click: SelectCust,
                                imageClass: "glyphicon glyphicon-ok",
                                template: '<a class="k-button-icon #=className#" #=attr# href="\\#"><span class="#=iconClass# #=imageClass#"></span></a>'
                            }
                        ],
                        width: "50px"
                    },
                    { field: "CustomerCode", title: "Kode Customer" },
                    { field: "CustomerCodeOld", title: "Kode Nama" },
                    { field: "CustomerNama", title: "Nama Customer" },
                    { field: "WajibPO", title: "Wajib PO", template: "#: WajibPO ? 'Ya' : 'Tidak' #" },
                    { field: "WajibGPS", title: "Wajib GPS", template: "#: WajibGPS ? 'Ya' : 'Tidak' #" },
                    { field: "SpecialTreatment", title: "Prioritas" },
                ],
            }).data("kendoGrid");

            gridRute = $("#GridRute").kendoGrid({
                dataSource: {
                    data: dsRute,
                    batch: true,
                    schema: {
                        model: {
                            fields: {
                                Id : { type: "number" },
                                ListIdRute : {type:"number"},
                                NamaRuteDaftarHarga : { type: "string" },
                                ListNamaRute : { type: "string" },
                                NamaJenisTruck : { type: "string" },
                                SatuanHarga : { type: "string"},
                                Keterangan : { type: "string" },
                            }
                        },
                    },
                    pageSize: 10,
                    pageable: true,
                    sortable: true,
                },
                filterable: kendoGridFilterable,
                sortable: true,
                reorderable: true,
                resizable: true,
                pageable: true,
                columns: [
                    {
                        command: [
                            {
                                name: "select",
                                text: "Select",
                                click: SelectRute,
                                imageClass: "glyphicon glyphicon-ok",
                                template: '<a class="k-button-icon #=className#" #=attr# href="\\#"><span class="#=iconClass# #=imageClass#"></span></a>'
                            }
                        ],
                        width: "50px"
                    },
                    { field: "NamaRuteDaftarHarga", title: "Nama Rute Daftar Harga" },
                    { field: "ListNamaRute", title: "List Nama Rute" },
                    { field: "NamaJenisTruck", title: "Jenis Truck" },
                    { field: "SatuanHarga", title: "Satuan" },
                    { field: "Keterangan", title: "Keterangan" },
                ],
            }).data("kendoGrid");

            //kondisi edit
            @if (Model.CustomerId != 0 && Model.CustomerId != null)
        {
        <text>
            callAjax(@Model.CustomerId, true);
            </text>
        }

            GridCustLoad = $("#gridmuat").kendoGrid({
                editable:true,
                dataSource: {
                    data: dsGridLoad,
                    batch: true,
                    schema: {
                        model: {
                            fields: {
                                Id: { type: "number" , editable:false},
                                Alamat: { type: "string" , editable:false},
                                Provinsi: { type: "string" , editable:false},
                                Kota: { type: "string" , editable:false},
                                Zona: { type: "string" , editable:false},
                                Telp: { type: "string" , editable:false},
                                Fax: { type: "string" , editable:false},
                                urutan: { type: "number" },
                                IsSelect:{ type: "boolean" }
                            }
                        },
                    },
                    change: function(e){
                        if (e.action == "itemchange" && e.field == "urutan"){
                            var model = e.items[0];
                            if(model.urutan > 0)
                            {
                                $("#gridmuat").find("tr[data-uid='" + model.uid + "']").addClass("k-state-selected").find(".checkbox").attr("checked", "checked");
                                //$("#gridmuat").find("tr[data-uid='" + model.uid + "'] td:eq(0)").find(".checkbox").attr("checked", "checked");
                                model.IsSelect = true;
                                checkedIdLoad[model.Id] = true;
                            }
                            else
                            {
                                $("#gridmuat").find("tr[data-uid='" + model.uid + "']").removeClass("k-state-selected").find(".checkbox").attr("checked", false);
                                //$("#gridmuat").find("tr[data-uid='" + model.uid + "'] td:eq(0)").find(".checkbox").attr("checked", false);
                                model.IsSelect = false;
                                model.urutan = 0;
                                checkedIdLoad[model.Id] = false;
                            }
                            dsGridLoad = $("#gridmuat").data("kendoGrid").dataSource.data();
                        }
                    },
                },
                dataBound: onDataBoundLoad,
                columns: [
                    {
                        template: "<input type='checkbox' class='checkbox' />",
                        width: "50px"
                    },
                    {
                        field: "urutan",
                        title: "Urutan"
                    },
                    {
                        field: "Zona",
                        title: "Zona"
                    },
                    {
                        field: "Alamat",
                        title: "Alamat"
                    },
                    {
                        field: "Kota",
                        title: "Kabupaten/Kota"
                    },
                    {
                        field: "Provinsi",
                        title: "Provinsi"
                    },
                    {
                        field: "Telp",
                        title: "Telp"
                    },
                    {
                        field: "Fax",
                        title: "Fax"
                    }
                ],
            }).data("kendoGrid");
            GridCustLoad.table.on("click", ".checkbox", selectLoad);

            GridCustUnLoad = $("#gridbongkar").kendoGrid({
                editable:true,
                dataSource: {
                    data: dsGridUnLoad,
                    batch: true,
                    schema: {
                        model: {
                            fields: {
                                Id: { type: "number" , editable:false},
                                Alamat: { type: "string" , editable:false},
                                Provinsi: { type: "string" , editable:false},
                                Kota: { type: "string" , editable:false},
                                Zona: { type: "string" , editable:false},
                                Telp: { type: "string" , editable:false},
                                Fax: { type: "string" , editable:false},
                                urutan: { type: "number" },
                                IsSelect:{ type: "boolean" }
                            }
                        }
                    },
                    change: function(e){
                        if (e.action == "itemchange" && e.field == "urutan"){
                            var model = e.items[0];
                            if(model.urutan > 0)
                            {
                                $("#gridbongkar").find("tr[data-uid='" + model.uid + "']").addClass("k-state-selected").find(".checkbox").attr("checked", true);
                                //$("#gridbongkar").find("tr[data-uid='" + model.uid + "'] td:eq(0)").find(".checkbox").attr("checked", true);
                                model.IsSelect = true;
                                checkedIdUnoad[model.Id] = true;
                            }
                            else
                            {
                                $("#gridbongkar").find("tr[data-uid='" + model.uid + "']").removeClass("k-state-selected").find(".checkbox").attr("checked", false);
                                //$("#gridbongkar").find("tr[data-uid='" + model.uid + "'] td:eq(0)").find(".checkbox").attr("checked", false);
                                model.IsSelect = false;
                                model.urutan = 0;
                                checkedIdUnoad[model.Id] = false;
                            }
                            dsGridUnLoad = $("#gridbongkar").data("kendoGrid").dataSource.data();
                        }
                    },
                },
                dataBound: onDataBoundUnload,
                columns: [
                    {
                        template: "<input type='checkbox' class='checkbox' />",
                        width: "50px"
                    },
                    {
                        field: "urutan",
                        title: "Urutan"
                    },
                    {
                        field: "Zona",
                        title: "Zona"
                    },
                    {
                        field: "Alamat",
                        title: "Alamat"
                    },
                    {
                        field: "Kota",
                        title: "Kabupaten/Kota"
                    },
                    {
                        field: "Provinsi",
                        title: "Provinsi"
                    },
                    {
                        field: "Telp",
                        title: "Telp"
                    },
                    {
                        field: "Fax",
                        title: "Fax"
                    }
                ],
            }).data("kendoGrid");
            GridCustUnLoad.table.on("click", ".checkbox", selectUnload);
        })

        $('#formsubmit').submit(function (e) {
            $('#StrLoad').val(JSON.stringify(GridCustLoad.dataSource.data()));
            $('#StrUnload').val(JSON.stringify(GridCustUnLoad.dataSource.data()));
        })
    </script>
<script src="~/Content/SalesOrderOncall/Comment.js"></script>
}
